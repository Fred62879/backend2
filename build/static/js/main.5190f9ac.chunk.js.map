{"version":3,"sources":["constants/actionType.js","reducers/inputReducer.js","reducers/inputUpdateReducer.js","reducers/redirectReducer.js","reducers/storeReducer.js","reducers/displayReducer.js","reducers/detailReducer.js","reducers/loginReducer.js","stores/store.js","components/layouts/Layout.js","actions/messAction.js","components/presentation/Messform.js","components/presentation/MessageItemListing.js","components/containers/Messages.js","components/presentation/Messarea.js","components/layouts/Home.js","components/layouts/About.js","components/presentation/MessageItemDetail.js","components/containers/MessArticle.js","components/containers/MessUpdate.js","App.js","serviceWorker.js","index.js"],"names":["INI_RECEIVE","ITEM_RECEIVE","ITEM_LOADING","MESS_INPUT","MESS_UPDATE","MESS_UPDATE_INPUT","MESS_ADD","MESS_CLEAR","MESS_DISPLAY","REDIRECT","RSREDIRECT","DETAIL_VIEW","LOGIN","inputReducer","input","action","type","at","inputUpdateReducer","uinput","redirectReducer","link","initialState","messes","item","itemloading","storeReducer","contents","updated","Object","assign","console","log","messitem","newm","id","mess","newmess","username","displayReducer","displayCho","detailReducer","messdetail","content","loginReducer","Login","store","createStore","combineReducers","detail","applyMiddleware","thunk","Layout","class","to","this","props","children","React","Component","tp","txt","un","fetchMessages","dispatch","fetch","then","response","json","res","data","catch","err","fetchMessItem","e","Messform","_onChange","event","load","target","value","_onSubmit","preventDefault","postMessItem","onChange","placeholder","onClick","defaultValue","connect","state","method","headers","body","JSON","stringify","ok","Error","statusText","MessageItemListing","Messages","allmess","dc","messItems","map","message","Messarea","_onShow","display","_onClear","cho","Home","About","MessageItemDetail","MessArticle","match","params","messItem","loading","itemLoading","MessUpdate","uload","updateMessItem","redirect","url","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.5190f9ac.chunk.js","sourcesContent":["export default {\n    INI_RECEIVE: 'INI_RECEIVE',\n    ITEM_RECEIVE: 'ITEM_RECEIVE',\n    ITEM_LOADING: 'ITEM_LOADING',\n    \n    MESS_INPUT: 'MESS_INPUT',\n    MESS_UPDATE: 'MESS_UPDATE',\n    MESS_UPDATE_INPUT: 'MESS_UPDATE_INPUT',\n    MESS_ADD: 'MESS_ADD',\n    MESS_CLEAR: 'MESS_CLEAR',\n    MESS_DISPLAY: 'MESS_DISPLAY',\n\n    REDIRECT: 'REDIRECT',\n    RSREDIRECT: 'RSREDIRECT',\n    DETAIL_VIEW: 'DETAIL_VIEW',\n    LOGIN: 'Login'\n}\n","import at from '../constants/actionType'\n\n\nconst inputReducer = (input = 'Your message comes here!', action) => {\n    if (action.type === at.MESS_INPUT) {\n        return action.input;\n    }\n    return input;\n};\n\nexport default inputReducer;\n","import at from '../constants/actionType'\n\n\nconst inputUpdateReducer = (uinput = 'Your can input your new message here!', action) => {\n    if (action.type === at.MESS_UPDATE_INPUT) {\n        return action.input;\n    }\n    return uinput;\n};\n\nexport default inputUpdateReducer;\n","import at from '../constants/actionType'\n\nconst redirectReducer = (link = '', action) => {\n    switch (action.type) {\n    case (at.REDIRECT):\n\treturn action.link;\n    case(at.RSREDIRECT):\n\treturn '';\n    default:\n\treturn link;\n    }\n}\n\nexport default redirectReducer;\n","import at from '../constants/actionType';\n\nvar initialState =  {\n    messes: [],\n    item: {},\n    itemloading: true\n}\n\nconst storeReducer = (contents = initialState, action) => {\n    let updated = Object.assign({}, contents);\n    switch (action.type) {\n\t\n    case at.INI_RECEIVE:\n\tupdated['messes'] = action.messes;\n\t// updated['itemloading'] = true;\n\treturn updated;\n\n    case at.ITEM_RECEIVE:\n\tconsole.log(action.messitem);\n\tupdated['item'] = action.messitem;\n\tupdated['itemloading'] = false;\n\treturn updated;\n\n    case at.ITEM_LOADING:\n\tupdated['itemloading'] = true;\n\treturn updated;\n\t\n    case at.MESS_ADD:\n\tconst newm = { id: action.id, mess: action.newmess, username: action.username };\n\t// updated['itemloading'] = true;\n\tupdated['messes'] = [...contents.messes, newm];\n\treturn updated;\n\t\n    case at.MESS_CLEAR:\n\tupdated['messes'] = action.messes;\n\t// updated['itemloading'] = true;\n\tupdated['item'] = action.messitem;\t\n\treturn updated;\n\t\n    default:\n\treturn contents;\n    }\n};\n\nexport default storeReducer;\n","import at from '../constants/actionType'\n\nconst displayReducer = (displayCho = 0, action) => {\n    if (action.type === at.MESS_DISPLAY)\n\treturn action.displayCho;\n    return displayCho\n};\n\nexport default displayReducer;\n","import at from '../constants/actionType'\n\nconst detailReducer = (messdetail = '', action) => {\n    if (action.type === at.DETAIL_VIEW)\n\treturn action.content;\n    return messdetail;\n}\n\nexport default detailReducer;\n","import at from '../constants/actionType'\n\nconst loginReducer = (username = 'fred', action) => {\n    if (action.type === at.Login)\n\treturn action.username; // change in future\n    return username;\n}\n\nexport default loginReducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport inputReducer from '../reducers/inputReducer';\nimport inputUpdateReducer from '../reducers/inputUpdateReducer';\nimport redirectReducer from '../reducers/redirectReducer';\nimport storeReducer from '../reducers/storeReducer';\nimport displayReducer from '../reducers/displayReducer';\nimport detailReducer from '../reducers/detailReducer';\nimport loginReducer from '../reducers/loginReducer';\n\nconst store = createStore(\n    combineReducers({\n\tinput: inputReducer,\n\tuinput: inputUpdateReducer,\n\tcontents: storeReducer,\n\tdisplayCho: displayReducer,\n\tdetail: detailReducer,\n\tlink: redirectReducer,\n\tusername: loginReducer\n    }), applyMiddleware(thunk)\n);\n\nexport default store;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport '../../App.css';\n\nclass Layout extends React.Component {\n    \n    render() {\n        return (\n\t\t<div class=\"container\">\n\t\t<ul class=\"nav\">\n\t        <li><Link class=\"link\" to={'/'}>Message</Link></li>\n\t        <li><Link class=\"link\" to={'/about'}>About</Link></li>\n                </ul>\n\t\t<div>{ this.props.children }</div>\n\t\t</div>\n\t)\n    }\n}\n\nexport default Layout;\n","import at from '../constants/actionType';\n\nexport const load = txt => {\n    return {\n        type: at.MESS_INPUT,\n        input: txt\n    };\n}\n\nexport const uload = txt => {\n    return {\n        type: at.MESS_UPDATE_INPUT,\n        input: txt\n    };\n}\n\nexport const update = newmess => {\n    return {\n        type: at.MESS_UPDATE,\n        newmess: newmess\n    };\n}\n\nexport const store = (tp, messes, item, id, txt, un) => {\n    return {\n        type: tp, // 'INI_RECEIVE', 'ITEM_RECEIVE', 'ITEM_LOADING', 'MESS_ADD', 'MESS_CLEAR'\n        messes: messes,\n        messitem: item,\n        id: id,\n        newmess: txt,\n        username: un\n    };\n}\n\nexport const display = cho => {\n    return {\n        type: at.MESS_DISPLAY,\n        displayCho: cho\n    };\n}\n\nexport const redirect = (type, url) => {\n    return {\n        type: type,\n        link: url\n    }\n}\n\nexport const login = username => {\n    return {\n        type: at.LOGIN,\n        username: username\n    };\n}\n\nexport const detail = messdetail => {\n    return {\n        type: at.DETAIL_VIEW,\n        content: messdetail\n    }\n}\n\nexport function fetchMessages() {\n    return dispatch => {\n        return fetch('http://localhost:3001/messages')\n            .then((response) => {\n                return response.json();\n            }).then((res) => {\n                dispatch(store(at.INI_RECEIVE, res.data, {}, \"\", \"\", \"\"));\n                return res.data;\n            }).catch((err) => {\n                console.log(err);\n            });\n    }\n}\n\nexport function fetchMessItem(id) {\n    return dispatch => {\n        return fetch(`/messages/detail/${id}`)\n            .then((response) => {\n                return response.json();\n            }).then((res) => {\n                console.log(\"fetch\");\n                console.log(res);\n                dispatch(store(at.ITEM_RECEIVE, [], res.data, \"\", \"\", \"\"));\n            }).catch((e) => {\n                console.log(\"ERROR\" + e);\n            });\n    }\n}\n\nexport function messItemLoading() {\n    return {\n        type: at.ITEM_LOADING\n    }\n}\n\nexport function postMessItem(mess, un) {\n    return dispatch => {\n        return fetch(`/messages`, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                id: \"\",\n                mess: mess,\n                username: un\n            })\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            } else {\n                return response.json();\n            }\n        }).then((res) => {\n            dispatch(store(at.MESS_ADD, [], {}, res.data.id, res.data.mess, res.data.username));\n        }).catch((e) => console.log(e));\n    }\n}\n\nexport function updateMessItem(newmess, id) {\n    return dispatch => {\n        return fetch(`/messages/update/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                mess: newmess\n            })\n        }).then((response) => {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            } else {\n                return response.json();\n            }\n        }).then((res) => {\n            fetchMessages();\n        }).catch((e) => console.log(e));\n    }\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { load, store, postMessItem } from '../../actions/messAction';\n\nclass Messform extends React.Component {\n    \n    _onChange = (event) => {\n        this.props.load(event.target.value);\n    }\n\n    _onSubmit = (event) => {\n        event.preventDefault();\n\t// this.props.dispatch(this.props.postMessItem(this.props.input, \"Anynoumous\"));\n\tthis.props.postMessItem(this.props.input, \"Anynoumous\");\n    }\n\n    render() {\n        return(\n                <form id=\"messform\">\n                <h4>Your input is: {this.props.input}</h4>\n\t        <textarea id=\"newmess\" onChange={this._onChange} placeholder=\"Your message comes here!\"></textarea>\n\t        <br></br>\n\t        <button id=\"submit\" onClick={this._onSubmit}>Submit</button>\n\t\t<input type=\"reset\" defaultValue=\"Reset\" />\n                </form>)\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { contents: state.contents, input: state.input };\n}\n\n/*\nconst mapDispatchToProps = dispatch => ({\n    load,\n    store,\n    postMessItem,\n    dispatch\n})\n*/\n/*\nfunction mapDispatchToProps(dispatch) {\n    let actions = bindActionCreators({ load, store, postMessItem });\n    return { ...actions, dispatch };\n}\n*/\n\nexport default connect(mapStateToProps, { load, store, postMessItem })(Messform);\n// export default connect(mapStateToProps, mapDispatchToProps)(Messform);\n","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport '../../App.css';\n\nclass MessageItemListing extends Component {\n    \n    render() {\n\tlet id = this.props.id;\n        return (\n\t    <div>\n\t\t<li class=\"messageli\">\n\t\t  <div class=\"item1\">\n\t  \t    {this.props.mess}\n\t          </div>\n\t\t  <div class=\"item1\">\n\t\t    <i>({this.props.username})</i>\n\t\t  </div>\n\t\t  <div class=\"item2\">\n\t\t    <Link class=\"link\" to={`/messages/detail/${id}`}>More Detail</Link>\n\t\t  </div>\n\t \t  <div class=\"item2\">\n\t\t    <Link class=\"link\" to={`/messages/update/${id}`}>Editing</Link>\n\t\t  </div>\n\t\t</li>\n\t\t<br></br>\n            </div>\n        )\n    }\n}\n\nMessageItemListing.propTypes = {\n    id: PropTypes.string.isRequired,\n    mess: PropTypes.string.isRequired,\n    username: PropTypes.string.isRequired\n};\n\nexport default MessageItemListing;\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport MIL from '../presentation/MessageItemListing';\nimport { fetchMessages } from '../../actions/messAction';\n\nclass Messages extends Component {\n\n    componentDidMount(){\n        this.props.dispatch(fetchMessages());\n    }\n    \n    render() {\n\tlet allmess = [];\n\tif (this.props.dc === 1)\n\t    allmess = this.props.contents.messes;\n\tconst messItems = allmess.map((message) =><MIL id={message.id} mess={message.mess} username={message.username} />);\n        return (<div><ul id=\"messages\">{ messItems }</ul></div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { dc: state.displayCho, contents: state.contents };\n}\n\nconst mapDispatchToProps = dispatch => ({\n    fetchMessages,\n    dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Messages);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { display, store } from '../../actions/messAction';\nimport Messages from '../containers/Messages';\n\nclass Messarea extends React.Component {\n    \n    _onShow = (event) => {\n\tthis.props.display(1);\n    }\n    \n    _onClear = (event) => {\n\tthis.props.store('MESS_CLEAR', [], {}, '', '');\n    }\n\n    render() {\n\treturn(<div id=\"messarea\">\n\t       <h4>All your messages</h4>\n\t       <button onClick={this._onShow}>Show</button>\n\t       <button onClick={this._onClear}>Clear</button>\n\t       <Messages />\n               </div>);\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { dc: state.displayCho, contents: state.contents };\n}\n\nexport default connect(mapStateToProps, { display, store })(Messarea);\n","import React from 'react';\nimport Messform from '../presentation/Messform.js';\nimport Messarea from '../presentation/Messarea.js';\n\nclass Home extends React.Component {\n    render() {\n\treturn (\n\t\t<div>\n\t\t<Messform/>\n\t\t<Messarea/>\n\t\t</div>\n\t);\n    }\n}\n\nexport default Home;\n","import React from 'react';\n\nclass About extends React.Component {\n    render() {\n        return (\n\t\t<div id=\"text\">\n\t\t<p>Hi there, I am Zhuoting Xie, a firt year BCS student. I study in UBC and am looking for co-op internships right now.</p>\n\t\t<p>This website is the message list website for CPSC436I class. You can store your messages and update it to the historical message form.</p>\n\t\t</div>\n\t);\n    }\n}\n\nexport default About;\n","import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass MessageItemDetail extends Component {\n    render(){\n        return (\n            <div>\n                <h2>Message Detail</h2>\n\t\t<p>Hi there, the message stored is {this.props.data.mess}</p>\n                <p>It is written by {this.props.data.username}</p>\n            </div>\n        )\n    }\n}\n\nMessageItemDetail.propTypes = {\n    data: PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        mess: PropTypes.string.isRequired,\n        username: PropTypes.string.isRequired\n    })\n};\n\nexport default MessageItemDetail;\n","import React, { Component} from 'react';\nimport MessageItemDetail from '../presentation/MessageItemDetail';\nimport { connect } from 'react-redux'\nimport { fetchMessItem } from '../../actions/messAction'\n\n\nclass MessArticle extends Component {\n    \n    componentDidMount() {\n\tconsole.log(\"MESSARTICLE\");\n        this.props.dispatch(fetchMessItem(this.props.match.params.id));\n    }\n\n    render() {\n        let { messItem } = this.props;\n\tlet loading = this.props.itemLoading;\n\t\n        return (\n            <div>\n                <ul>\n\t\t{ !loading? <MessageItemDetail data={messItem} /> : <div>Loading</div>}\n                </ul>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        messItem: state.contents.item,\n\titemLoading: state.contents.itemloading\n    }\n}\n\nexport default connect(mapStateToProps)(MessArticle)\n","import React, { Component} from 'react';\nimport at from '../../constants/actionType';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport Home from '../layouts/Home.js';\nimport { uload, redirect, fetchMessItem, updateMessItem } from '../../actions/messAction';\n\n\nclass MessUpdate extends Component {\n\n    componentDidMount() {\n\tthis.props.fetchMessItem(this.props.match.params.id);\n    }\n\n    _onChange = (event) => {\n        this.props.uload(event.target.value);\n    }\n\n    _onSubmit = (event) => {\n        event.preventDefault();\n\tthis.props.updateMessItem(this.props.uinput, this.props.match.params.id);\n\tthis.props.uload('');\n\tthis.props.redirect(at.REDIRECT, '/');\n    }\n\n    render() {\n        let { messItem } = this.props;\n\t\n\tif (this.props.link !== '') {\n\t    const url = this.props.link;\n\t    this.props.redirect(at.RSREDIRECT, '');\n\t    console.log(url);\n\t    return <Redirect to={url} />\n\t}\n\t\n        return (\n\t\t<div>\n\t\t<p>Your original message is {messItem.mess}</p>\n                <form id=\"updateform\">\n                <h4>Your input is: {this.props.uinput}</h4>\n\t        <textarea id=\"newmess\" onChange={this._onChange} placeholder=\"Your can input your new message here!\"></textarea>\n\t        <br></br>\n\t        <button id=\"submit\" onClick={this._onSubmit}>Submit</button>\n\t\t<input type=\"reset\" defaultValue=\"Reset\" />\n                </form>\n\t\t</div>\n\t)\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        messItem: state.contents.item,\n\tuinput: state.uinput,\n\tlink: state.link\n    }\n}\n\nexport default connect(mapStateToProps, { uload, redirect, fetchMessItem, updateMessItem })(MessUpdate);\n","import './App.css';\nimport store from './stores/store';\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { Route, BrowserRouter } from 'react-router-dom';\n\nimport Layout from './components/layouts/Layout.js';\nimport Home from './components/layouts/Home.js';\nimport About from './components/layouts/About.js';\nimport MessArticle from './components/containers/MessArticle';\nimport MessUpdate from './components/containers/MessUpdate';\n\n\nclass App extends React.Component {\n\n    render() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t<BrowserRouter>\n\t\t<Layout>\n\t\t<Route exact path=\"/\" component = {Home} />\n\t\t<Route path=\"/about\" component = {About} />\n\t\t<Route path=\"/messages/detail/:id\" component = {MessArticle} />\n\t\t<Route path=\"/messages/update/:id\" component = {MessUpdate} />\n\t\t</Layout>\n\t\t</BrowserRouter>\n\t\t</Provider>\n\t);\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import { Provider } from 'react-redux';\n// import { createStore } from 'redux';\n// import reducers from './reducers';\n\n/*\nReactDOM.render(\n        <Provider store={createStore(reducers)}>\n        <App/>\n        </Provider>,\n  document.getElementById('root')\n);\n*/\n\nReactDOM.render(<App />,document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}